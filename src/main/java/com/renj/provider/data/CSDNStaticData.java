package com.renj.provider.data;

/**
 * ======================================================================
 * <p>
 * 作者：Renj
 * 邮箱：itrenjunhua@163.com
 * <p>
 * 创建时间：2019-06-28   15:06
 * <p>
 * 描述：
 * <p>
 * 修订历史：
 * <p>
 * ======================================================================
 */
public class CSDNStaticData {
    /* ===========================  banner 数据 =========================== */
    static int[] bannerIds = {
            9, 8, 7, 6, 5, 4, 3, 2, 1,
    };

    static String[] banners = {
            "http://img07.mifile.cn/v1/MI_55950AFBBEDCB/T1t.V_BQJT1RXrhCrK.jpg",
            "http://www.33lc.com/article/UploadPic/2012-8/201281310521725613.jpg",
            "http://www.33lc.com/article/UploadPic/2012-8/2012891154949207.jpg",
            "http://pic1.win4000.com/wallpaper/0/59c1dab039d7f.jpg",
            "http://pic1.win4000.com/wallpaper/2018-01-23/5a669e431688c.jpg",
            "http://www.net2006.com/pics/uploadimg/201806/201806201000118074.jpg",
            "http://pic1.win4000.com/wallpaper/7/587831239ce34.jpg",
            "http://www.zhisheji.com/data/head/58115cfa9d473.jpg",
            "http://images.aedu.cn/Class/UploadPhoto/2016053123274002423.jpg",
    };

    static String[] bannerTitles = {
            "Java中Collection和Map体系(Java容器)",
            "Android页面状态控制框架(RPageStatusController)",
            "Android RecyclerView —— 自定义分割线",
            "Android RecyclerView —— 适配器封装探索",
            "Android RecyclerView —— 基本使用",
            "Dagger 2.11及以上的简便用法",
            "Android DataBinding",
            "Android 中的 IntentService 类详解",
            "Android 中的 HandlerThread 类详解",
    };

    static String[] bannerUrls = {
            "https://blog.csdn.net/ITRenj/article/details/94363815",
            "https://blog.csdn.net/ITRenj/article/details/93634780",
            "https://blog.csdn.net/ITRenj/article/details/92649029",
            "https://blog.csdn.net/ITRenj/article/details/92405204",
            "https://blog.csdn.net/ITRenj/article/details/91556719",
            "https://blog.csdn.net/ITRenj/article/details/85267381",
            "https://blog.csdn.net/ITRenj/article/details/83781123",
            "https://blog.csdn.net/ITRenj/article/details/79470690",
            "https://blog.csdn.net/ITRenj/article/details/79461878",
    };

    /* ===========================  notices 数据 =========================== */
    static int[] noticesIds = {
            9, 8, 7, 6, 5, 4, 3, 2, 1,
    };

    static String[] notices = {
            "Java中Collection和Map体系(Java容器)",
            "Android页面状态控制框架(RPageStatusController)",
            "Android RecyclerView —— 自定义分割线",
            "Android RecyclerView —— 适配器封装探索",
            "Android RecyclerView —— 基本使用",
            "Dagger 2.11及以上的简便用法",
            "Android DataBinding",
            "Android 中的 IntentService 类详解",
            "Android 中的 HandlerThread 类详解",
    };
    static String[] noticeUrls = {
            "https://blog.csdn.net/ITRenj/article/details/94363815",
            "https://blog.csdn.net/ITRenj/article/details/93634780",
            "https://blog.csdn.net/ITRenj/article/details/92649029",
            "https://blog.csdn.net/ITRenj/article/details/92405204",
            "https://blog.csdn.net/ITRenj/article/details/91556719",
            "https://blog.csdn.net/ITRenj/article/details/85267381",
            "https://blog.csdn.net/ITRenj/article/details/83781123",
            "https://blog.csdn.net/ITRenj/article/details/79470690",
            "https://blog.csdn.net/ITRenj/article/details/79461878",
    };

    /* ===========================  list 数据 =========================== */
    static int[] listIds = {
            54, 53, 52, 51,
            50, 49, 48, 47, 46, 45, 44, 43, 42, 41,
            40, 39, 38, 37, 36, 35, 34, 33, 32, 31,
            30, 29, 28, 27, 26, 25, 24, 22, 22, 21,
            20, 19, 18, 17, 16, 15, 14, 11, 11, 11,
            10, 9, 8, 7, 6, 5, 4, 3, 2, 1,
    };

    static String[] titles = {
            "Java中Collection和Map体系(Java容器)",
            "Android页面状态控制框架(RPageStatusController)",
            "Android RecyclerView —— 自定义分割线",
            "Android RecyclerView —— 适配器封装探索",
            "Android RecyclerView —— 基本使用",
            "Dagger 2.11及以上的简便用法",
            "Android DataBinding",
            "Android 中的 IntentService 类详解",
            "Android 中的 HandlerThread 类详解",
            "Vim基本操作",
            "Linux 基本指令",
            "Android适配生成对应的values文件",
            "Android多个Module统一配置相同jar或库的版本号",
            "AsyncTask 完全解析",
            "Android 蓝牙聊天简单Demo",
            "金额输入框 MoneyView",
            "RxJava2 中常用操作符和Subject常用子类说明",
            "EditText内容格式化控件 XEditText 和 输入内容过滤器",
            "Android 浮动菜单效果控件",
            "Android 屏幕适配常用方法",
            "Android Studio编译常见错误",
            "应用程序方法数超过限制解决办法",
            "面向对象的三个基本特征和五大设计原则",
            "Git 在 Android Studio 中的使用（图解）",
            "Git 使用整理（二）",
            "Git 使用整理（一）",
            "SVN在Android studio中的使用",
            "OkHttp简介及使用",
            "Volley框架(五)：Volley源码分析",
            "Volley框架(四)：使用Volley上传文件",
            "Volley框架(三)：使用Volley提交表单数据",
            "Volley框架(二)：使用Volley加载图片",
            "Volley框架(一)：使用Volley请求数据",
            "Android中的Handler机制分析(三) Looper分析和Handler其他知识",
            "Android中的Handler机制分析(二) MessageQueue分析",
            "Android中的Handler机制分析(一) Handler和Message分析",
            "图片框架Glide的使用(二)",
            "图片框架Glide的使用(一)",
            "Android inflate实例解析",
            "Android inflate解析",
            "图片框架Picasso的简单使用",
            "Android 操作引导功能",
            "Android 水波纹效果",
            "Android 中PathMeasure的使用",
            "invalidate()和requestLayout()方法调用过程",
            "Android中的Scroller类",
            "Android中的事件分发机制",
            "Android自定义View的基本步骤和使用自定义属性",
            "Android自定义View之基本API（三）",
            "Android自定义View之基本API（二）",
            "Android自定义View之基本API（一）",
            "Android自定义View之View的绘制流程",
            "Android自定义View之Activity页面的组成",
            "设置ViewPager的切换动画时间",
    };

    static String[] contents = {
            "Java中Collection和Map体系(Java容器) Java常用容器类继承关系图解 Java容器类简介 Java中容器类主要分为四中体系：List、Set、Queue、Map。",
            "Android页面状态控制框架(RPageStatusController) 在Android开发中，对于需要加载网络数据的页面，一般页面都会对应多种状态，常见的有：加载中状态、网络错误状态、内容为空状态、内容状态、加载失败状态以及没有找到相关内容状态等",
            "前面说了 RecyclerView 的基本使用以及对适配器的封装，但是在使用 ListView 时，有 dividerHeight 和 divider 属性用来设置分割线的高度和颜色(Drawable)，但是在 RecyclerView 中并没有这个属性，而且也没有替代的属性",
            "RecyclerView 如果需要填充数据，就必须使用到适配器。在一般情况下，我们定义一个适配器只需要定义一个类，然后集成 RecyclerView.Adapter 类，然后实现齐总的抽象的方法即可",
            "RecyclerView 我相信大家都不陌生，是Google在Android 5.0 的时候推出的一个可以在有限的窗口中展示大量数据集的控件(类似的控件有ListView、GridView)，放在了 com.android.support:recyclerview-v7:xx.x.x 包下(xx表示版本)",
            "Dagger 2.11及以上的简便用法 关于 Dagger2 的使用网上有很多的例子，这里就不在多说了。但是dagger2在使用的过程中我们几乎需要在每个页面去调用类似代码如下： MainComponent component = DaggerMainComponent.builder() ",
            "添加 Android DataBinding 支持。Android studio 需要在1.3以上，在module级别的gradle中添加大DataBinding支持",
            "IntentService 继承至 Service ，所以 Service 的特点 IntentService 也全部拥有",
            "HandlerThread 类继承至 Thread 类，你可以把它看做是一个普通的线程类；当然，既然我们今天要说它，就不能在把它看做是一个普通的线程类了类处理了。",
            "Vim基本操作 Vim一般认为有三种模式 命令模式：、编辑模式（输入模式以及 末行模式（尾行模式）",
            "Linux 基本指令 推荐：linux命令大全 Linux关机命令 常用：halt、reboot 重启命令 reboot shutdown -r now 立刻重启 shutdown -r 10 过10分钟自动重启",
            "Android适配生成对应的values文件(如：values-1080x1920) 使用如下Java代码自动生成多个values文件夹以及对应的lay-x、lay-y文件",
            "Android Studio多个Module依赖相同的库时对版本号进行统一配置 在Android项目中，一个项目经常会依赖其他的一个甚至多个库文件，在这种依赖的时候最常见的一个错误就是 jar包版本不同引起jar包冲突，最常见的做法就是 删掉其中一个，只留下一个",
            "AsyncTask 完全解析 引言 我们知道，在 Android 中，UI 线程不能执行耗时操作；在子线程中不能执行更新 UI 的操作。如果需要在子线程中进行 UI 相关的操作，那么就需要借助 Android 中的异步消息机制(比如我们熟悉的Handler消息机制)才能完成",
            "Android 蓝牙聊天简单Demo蓝牙技术是一种近距离通信技术，自从研发至今，已经被广泛应用，生活中处处可见蓝牙耳机，有些穿戴设备也是基于蓝牙进行通信的，蓝牙通信功耗小，对于近距离通信是一个不错的选择",
            "金额输入框主要功能： 1. 指定小数点后能保存的小数位数; 2. 指定从多少位开始到最后不能为小数点; 3. 当第一个输入的为小数点时，自动在小数点前 4. 当第一个输入的为0时，如果接着输入0，仍然显示0；如果接着输入大于0的数，就用后面输入的数将0替换.",
            "RxJava2 中常用操作符和Subject常用子类代码练习及说明",
            "在我们开发当中，输入框控件是很常见的，最常见的就是注册、登陆、密码设置与修改；另外就是身份证号和银行卡号的录入等。在录入这些信息的时候，如果我们直接使用系统的EditText进行编程，虽然能够实现",
            "Android 浮动菜单效果",
            "Android 屏幕适配常用方法",
            "使用Android studio是build 项目常见问题集结",
            "当应用程序的方法数超过65535时的解决办法",
            "面向对象的三个基本特征和五大设计原则 继承、封装和多态 单一职责原则、开闭原则、替换原则、依赖倒置原则、接口隔离原则",
            "Git 在 Android Studio 中的使用 在《Git 使用整理（一）》和《Git 使用整理（二）》两篇博客中，我们知道了怎样使用Git版本控制工具的命令形式，在这篇博客中就来看一下Git版本控制工具在Android Studio中是怎样使用的吧。",
            "Git 使用整理（二） 主要包含内容：使用分支、多人协作",
            "Git 使用整理（一） 主要包的含内容：git客户端的下载安装、配置用户名和邮箱、本地仓库常用命令、使用配置、工作区和暂存区、撤销、修改和删除文件、生成SSH key、远程仓库",
            "SVN在Android studio中的使用 主要内容：怎样在Android Studio中使用SVN版本控制工具",
            "OkHttp是一个处理网络请求的开源项目,是安卓端一个很火热的轻量级网络框架,由Square公司贡献(该公司还贡献了Picasso)，用于替代HttpUrlConnection和Apache HttpClient",
            "Volley框架(五)：Volley源码分析 在前面几篇博客中我们已经把Volley的一些常见用法基本上说得差不多了。说了Volley那么多的用法，但是对于他的原理还不是很了解，所以这篇博客主要来分析一下Volley的执行过程。",
            "Volley框架(四)：使用Volley上传文件 在上一篇博客《Volley框架(三)：使用Volley提交表单数据》中，我们已经知道了使用Volley提交表单数据，这篇博客我们来说一下使用Volley实现上传文件。",
            "Volley框架(三)：使用Volley提交表单数据 在上一篇博客《Volley框架(二)：使用Volley加载图片》中，我们已经将Volley加载图片的功能说完了，这篇博客我们来说一下使用Volley提交表单数据。",
            "Volley框架(二)：使用Volley加载图片 今天我们就来看一下Volley的另外一个作用，使用Volley加载图片，同时使用Volley还能非常简单的实现内存和磁盘缓存，达到类似Universal-Image-Loader图片加载框架的功能。",
            "Volley框架(一)：使用Volley请求数据 StringRequest、JsonRequest和自定义BeanRequest，以及使用Volley带参数的请求",
            "Android中的Handler机制分析(三) Looper分析和Handler其他知识 在前面的博客中我们介绍了Handler相关的几个类(Handler、Message和MessageQueue)，在这一篇博客中，我们介绍Handler机制中最后一个重要的类，Looper类。并介绍2个小知识点。",
            "在上一篇博客《Android中的Handler机制分析(一) Handler和Message分析》中我们说到了Android中Handler机制的两个重要类Message和Handler，在这篇博客中，我们继续来看一下另外的一个重要类，MessageQueue(消息队列)类。",
            "Android中的Handler机制分析(一) Handler和Message分析",
            "在上一篇博客《图片框架Glide的使用(一)》中介绍了部分图片加载框架Glide的使用方法，在这一篇博客中继续将介绍Glide框架中的另外一些使用。",
            "图片框架Glide的使用(一) 前面我们说过了Picasso的简单使用，在这篇博客中我们就说一下另外一个很好的图片加载框架Glide。 Glide库的作者是bumptech。这个库被广泛的运用在google的开源项目中，包括2014年google I/O大会上发布的官方app。",
            "在上一篇博客中，我们从源码的角度出发分析了Android下inflate的过程，但整篇博客基本都是源码，并没有使用实际的代码和图片来进行说明与对比，感觉有点摸不着头脑，所以在这篇博客中我将会通过几个实例来对比和证实一下上一篇博客的几个结论。",
            "对于inflate，我相信大家都不陌生，它的作用是将一个layout.xml布局文件变为一个View对象。尤其在ListView、GridView的Adapter中，我们继承BaseAdapter时必须重写的几个方法中有一个getView()方法，",
            "Picasso 是Square公司开源的一个Android图形缓存库，实现图片下载和缓存功能。 Picasso不仅实现了图片异步加载的功能，还解决了android中加载图片时需要解决的一些常见问题。 ",
            "在我们开发一个新的应用程序或者对一个应用程序进行迭代改动较大时，大多数APP都会在用户第一次使用这些新功能的时候，通过一定的方法来告诉、指导用户发现、使用这些新的功能，而这个方法就是操作引导。",
            "在Android开发中，我们的UI设计师可能会设计出一些比较比较炫酷或者个性的效果然后需要我们来实现，今天给大家分享一个使用Android自定义控件实现的水波纹效果。",
            "Path，不论是在自定义View还是动画，都占有举足轻重的地位。",
            "在上一篇博客中我们开始就提到了两组方法，其中scrollTo()和scrollBy()在上一篇博客中已经说的比较详细了，但是对于另一组invalidate()系列的方法只是说明他们重新调用draw方法绘制界面，并没有说明他们究竟是怎样一步一步实现对界面进行重绘的。",
            "Scroller译为“滚动器”，是ViewGroup类中原生支持的一个功能。在Android中，如果一个控件需要实现滚动的功能，就需要用到Scroller类。在Android系统的控件中，比如ListView、ViewPager等都用到了。",
            "在Android开发中，事件的分发机制是一块比较重要的知识体系，了解并熟悉Android中的事件分发机制有助于分析各种点击滑动失效问题，同时也能更好的去扩展控件的事件功能和开发自定义控件。这篇博客主要就是分析Android中的事件分发。",
            "在前面几篇博客了解了Android中View的绘制流程和自定义View的几个常用类，在这一篇博客中主要介绍一下Android中自定义View的基本步骤以及简单的使用自定义属性。",
            "我们可以把这个Canvas理解成系统提供给我们的一块内存区域(但实际上它只是一套画图的API，真正的内存是下面的Bitmap)，而且它还提供了一整套对这个内存区域进行操作的方法，所有的这些操作都是画图API。",
            "在上一篇博客中介绍了自定义View的几个常用类，在这一篇博客中接着介绍另外的一个常用类，Paint类： Paint翻译为“画笔”，为绘图定义各种参数：颜色、线条样式、图案样式等。通常的绘图思路是先定义Paint对象，指定绘图参数，再通过Canvas对象进行图形绘制，",
            "在这一篇博客中，我们来了解一下Android给我们提供的一些常见的绘图的API。绘图的API是什么呢，我就用一个比喻吧。当Android工程师在自定义view是就相当于一个画家，那么画家作画是不是需要了工具了，如画板、画布、画笔以及颜料等，",
            "上一篇博客介绍了Android中Activity的页面组成，在其中说到了DecorView是View的根节点，也说到了PhoneWindow可以管理DecorView显示视图。但是我们将所有的View都增加到根节点之后，系统是怎样将这些View展示到用户眼前的呢？",
            "Activity包含了一个管理窗口的继承至Window的PhoneWindow对象，而在PhoneWindow中创建了一个继承至FrameLayout类的DecorView对象，并且把包含了ActionBar、TitleBar和Content的screen.xml布局文件通过addView()方法",
            "当我们在直接使用viewPager.setCurrentItem(currentItem);时，ViewPager的切换使用时间是系统给定的，如果我们需要自己设置切换使用时长，系统在ViewPager类中是没有给出方法直接设置的，所以我们需要自己通过其他方法来进行设置。",
    };

    static String[] listUrls = {
            "https://blog.csdn.net/ITRenj/article/details/94363815",
            "https://blog.csdn.net/ITRenj/article/details/93634780",
            "https://blog.csdn.net/ITRenj/article/details/92649029",
            "https://blog.csdn.net/ITRenj/article/details/92405204",
            "https://blog.csdn.net/ITRenj/article/details/91556719",
            "https://blog.csdn.net/ITRenj/article/details/85267381",
            "https://blog.csdn.net/ITRenj/article/details/83781123",
            "https://blog.csdn.net/ITRenj/article/details/79470690",
            "https://blog.csdn.net/ITRenj/article/details/79461878",
            "https://blog.csdn.net/ITRenj/article/details/84500646",
            "https://blog.csdn.net/ITRenj/article/details/84001533",
            "https://blog.csdn.net/ITRenj/article/details/82978564",
            "https://blog.csdn.net/ITRenj/article/details/79231736",
            "https://blog.csdn.net/ITRenj/article/details/79108413",
            "https://blog.csdn.net/ITRenj/article/details/78909474",
            "https://blog.csdn.net/ITRenj/article/details/78774494",
            "https://blog.csdn.net/ITRenj/article/details/78753765",
            "https://blog.csdn.net/ITRenj/article/details/78199224",
            "https://blog.csdn.net/ITRenj/article/details/73224692",
            "https://blog.csdn.net/ITRenj/article/details/72403865",
            "https://blog.csdn.net/ITRenj/article/details/72403730",
            "https://blog.csdn.net/ITRenj/article/details/72403081",
            "https://blog.csdn.net/ITRenj/article/details/72401398",
            "https://blog.csdn.net/ITRenj/article/details/70177537",
            "https://blog.csdn.net/ITRenj/article/details/70176942",
            "https://blog.csdn.net/ITRenj/article/details/70176739",
            "https://blog.csdn.net/ITRenj/article/details/69791517",
            "https://blog.csdn.net/ITRenj/article/details/69787931",
            "https://blog.csdn.net/ITRenj/article/details/60887398",
            "https://blog.csdn.net/ITRenj/article/details/60640752",
            "https://blog.csdn.net/ITRenj/article/details/59795669",
            "https://blog.csdn.net/ITRenj/article/details/58752341",
            "https://blog.csdn.net/ITRenj/article/details/58384216",
            "https://blog.csdn.net/ITRenj/article/details/54608728",
            "https://blog.csdn.net/ITRenj/article/details/54590280",
            "https://blog.csdn.net/ITRenj/article/details/54578108",
            "https://blog.csdn.net/ITRenj/article/details/54297920",
            "https://blog.csdn.net/ITRenj/article/details/54143889",
            "https://blog.csdn.net/ITRenj/article/details/54025283",
            "https://blog.csdn.net/ITRenj/article/details/53997962",
            "https://blog.csdn.net/ITRenj/article/details/53918226",
            "https://blog.csdn.net/ITRenj/article/details/53890118",
            "https://blog.csdn.net/ITRenj/article/details/53874219",
            "https://blog.csdn.net/ITRenj/article/details/53841071",
            "https://blog.csdn.net/ITRenj/article/details/53819583",
            "https://blog.csdn.net/ITRenj/article/details/53769504",
            "https://blog.csdn.net/ITRenj/article/details/53720788",
            "https://blog.csdn.net/ITRenj/article/details/53699933",
            "https://blog.csdn.net/ITRenj/article/details/53620462",
            "https://blog.csdn.net/ITRenj/article/details/53596378",
            "https://blog.csdn.net/ITRenj/article/details/53590035",
            "https://blog.csdn.net/ITRenj/article/details/53575274",
            "https://blog.csdn.net/ITRenj/article/details/53560737",
            "https://blog.csdn.net/ITRenj/article/details/53544751",
    };
}
