{"pid":1,"id":1,"title":"设置ViewPager的切换动画时间","content":"当我们在直接使用viewPager.setCurrentItem(currentItem);时，ViewPager的切换使用时间是系统给定的，如果我们需要自己设置切换使用时长，系统在ViewPager类中是没有给出方法直接设置的，所以我们需要自己通过其他方法来进行设置。","url":"https://blog.csdn.net/ITRenj/article/details/53544751","images":[]}
{"pid":1,"id":2,"title":"Android自定义View之Activity页面的组成","content":"Activity包含了一个管理窗口的继承至Window的PhoneWindow对象，而在PhoneWindow中创建了一个继承至FrameLayout类的DecorView对象，并且把包含了ActionBar、TitleBar和Content的screen.xml布局文件通过addView()方法","url":"https://blog.csdn.net/ITRenj/article/details/53560737","images":[]}
{"pid":1,"id":3,"title":"Android自定义View之View的绘制流程","content":"上一篇博客介绍了Android中Activity的页面组成，在其中说到了DecorView是View的根节点，也说到了PhoneWindow可以管理DecorView显示视图。但是我们将所有的View都增加到根节点之后，系统是怎样将这些View展示到用户眼前的呢？","url":"https://blog.csdn.net/ITRenj/article/details/53575274","images":[]}
{"pid":1,"id":4,"title":"Android自定义View之基本API（一）","content":"在这一篇博客中，我们来了解一下Android给我们提供的一些常见的绘图的API。绘图的API是什么呢，我就用一个比喻吧。当Android工程师在自定义view是就相当于一个画家，那么画家作画是不是需要了工具了，如画板、画布、画笔以及颜料等，","url":"https://blog.csdn.net/ITRenj/article/details/53590035","images":[]}
{"pid":1,"id":5,"title":"Android自定义View之基本API（二）","content":"在上一篇博客中介绍了自定义View的几个常用类，在这一篇博客中接着介绍另外的一个常用类，Paint类： Paint翻译为“画笔”，为绘图定义各种参数：颜色、线条样式、图案样式等。通常的绘图思路是先定义Paint对象，指定绘图参数，再通过Canvas对象进行图形绘制，","url":"https://blog.csdn.net/ITRenj/article/details/53596378","images":[]}
{"pid":1,"id":6,"title":"Android自定义View之基本API（三）","content":"我们可以把这个Canvas理解成系统提供给我们的一块内存区域(但实际上它只是一套画图的API，真正的内存是下面的Bitmap)，而且它还提供了一整套对这个内存区域进行操作的方法，所有的这些操作都是画图API。","url":"https://blog.csdn.net/ITRenj/article/details/53620462","images":[]}
{"pid":1,"id":7,"title":"Android自定义View的基本步骤和使用自定义属性","content":"在前面几篇博客了解了Android中View的绘制流程和自定义View的几个常用类，在这一篇博客中主要介绍一下Android中自定义View的基本步骤以及简单的使用自定义属性。","url":"https://blog.csdn.net/ITRenj/article/details/53699933","images":[]}
{"pid":1,"id":8,"title":"Android中的事件分发机制","content":"在Android开发中，事件的分发机制是一块比较重要的知识体系，了解并熟悉Android中的事件分发机制有助于分析各种点击滑动失效问题，同时也能更好的去扩展控件的事件功能和开发自定义控件。这篇博客主要就是分析Android中的事件分发。","url":"https://blog.csdn.net/ITRenj/article/details/53720788","images":[]}
{"pid":1,"id":9,"title":"Android中的Scroller类","content":"Scroller译为“滚动器”，是ViewGroup类中原生支持的一个功能。在Android中，如果一个控件需要实现滚动的功能，就需要用到Scroller类。在Android系统的控件中，比如ListView、ViewPager等都用到了。","url":"https://blog.csdn.net/ITRenj/article/details/53769504","images":[]}
{"pid":1,"id":10,"title":"invalidate()和requestLayout()方法调用过程","content":"在上一篇博客中我们开始就提到了两组方法，其中scrollTo()和scrollBy()在上一篇博客中已经说的比较详细了，但是对于另一组invalidate()系列的方法只是说明他们重新调用draw方法绘制界面，并没有说明他们究竟是怎样一步一步实现对界面进行重绘的。","url":"https://blog.csdn.net/ITRenj/article/details/53819583","images":[]}
{"pid":1,"id":11,"title":"Android 中PathMeasure的使用","content":"Path，不论是在自定义View还是动画，都占有举足轻重的地位。","url":"https://blog.csdn.net/ITRenj/article/details/53841071","images":[]}
{"pid":1,"id":11,"title":"Android 水波纹效果","content":"在Android开发中，我们的UI设计师可能会设计出一些比较比较炫酷或者个性的效果然后需要我们来实现，今天给大家分享一个使用Android自定义控件实现的水波纹效果。","url":"https://blog.csdn.net/ITRenj/article/details/53874219","images":[]}
{"pid":1,"id":11,"title":"Android 操作引导功能","content":"在我们开发一个新的应用程序或者对一个应用程序进行迭代改动较大时，大多数APP都会在用户第一次使用这些新功能的时候，通过一定的方法来告诉、指导用户发现、使用这些新的功能，而这个方法就是操作引导。","url":"https://blog.csdn.net/ITRenj/article/details/53890118","images":[]}
{"pid":1,"id":14,"title":"图片框架Picasso的简单使用","content":"Picasso 是Square公司开源的一个Android图形缓存库，实现图片下载和缓存功能。 Picasso不仅实现了图片异步加载的功能，还解决了android中加载图片时需要解决的一些常见问题。 ","url":"https://blog.csdn.net/ITRenj/article/details/53918226","images":[]}
{"pid":1,"id":15,"title":"Android inflate解析","content":"对于inflate，我相信大家都不陌生，它的作用是将一个layout.xml布局文件变为一个View对象。尤其在ListView、GridView的Adapter中，我们继承BaseAdapter时必须重写的几个方法中有一个getView()方法，","url":"https://blog.csdn.net/ITRenj/article/details/53997962","images":[]}
{"pid":1,"id":16,"title":"Android inflate实例解析","content":"在上一篇博客中，我们从源码的角度出发分析了Android下inflate的过程，但整篇博客基本都是源码，并没有使用实际的代码和图片来进行说明与对比，感觉有点摸不着头脑，所以在这篇博客中我将会通过几个实例来对比和证实一下上一篇博客的几个结论。","url":"https://blog.csdn.net/ITRenj/article/details/54025283","images":[]}
{"pid":1,"id":17,"title":"图片框架Glide的使用(一)","content":"图片框架Glide的使用(一) 前面我们说过了Picasso的简单使用，在这篇博客中我们就说一下另外一个很好的图片加载框架Glide。 Glide库的作者是bumptech。这个库被广泛的运用在google的开源项目中，包括2014年google I/O大会上发布的官方app。","url":"https://blog.csdn.net/ITRenj/article/details/54143889","images":[]}
{"pid":1,"id":18,"title":"图片框架Glide的使用(二)","content":"在上一篇博客《图片框架Glide的使用(一)》中介绍了部分图片加载框架Glide的使用方法，在这一篇博客中继续将介绍Glide框架中的另外一些使用。","url":"https://blog.csdn.net/ITRenj/article/details/54297920","images":[]}
{"pid":1,"id":19,"title":"Android中的Handler机制分析(一) Handler和Message分析","content":"Android中的Handler机制分析(一) Handler和Message分析","url":"https://blog.csdn.net/ITRenj/article/details/54578108","images":[]}
{"pid":1,"id":20,"title":"Android中的Handler机制分析(二) MessageQueue分析","content":"在上一篇博客《Android中的Handler机制分析(一) Handler和Message分析》中我们说到了Android中Handler机制的两个重要类Message和Handler，在这篇博客中，我们继续来看一下另外的一个重要类，MessageQueue(消息队列)类。","url":"https://blog.csdn.net/ITRenj/article/details/54590280","images":[]}
{"pid":1,"id":21,"title":"Android中的Handler机制分析(三) Looper分析和Handler其他知识","content":"Android中的Handler机制分析(三) Looper分析和Handler其他知识 在前面的博客中我们介绍了Handler相关的几个类(Handler、Message和MessageQueue)，在这一篇博客中，我们介绍Handler机制中最后一个重要的类，Looper类。并介绍2个小知识点。","url":"https://blog.csdn.net/ITRenj/article/details/54608728","images":[]}
{"pid":1,"id":22,"title":"Volley框架(一)：使用Volley请求数据","content":"Volley框架(一)：使用Volley请求数据 StringRequest、JsonRequest和自定义BeanRequest，以及使用Volley带参数的请求","url":"https://blog.csdn.net/ITRenj/article/details/58384216","images":[]}
{"pid":1,"id":22,"title":"Volley框架(二)：使用Volley加载图片","content":"Volley框架(二)：使用Volley加载图片 今天我们就来看一下Volley的另外一个作用，使用Volley加载图片，同时使用Volley还能非常简单的实现内存和磁盘缓存，达到类似Universal-Image-Loader图片加载框架的功能。","url":"https://blog.csdn.net/ITRenj/article/details/58752341","images":[]}
{"pid":1,"id":24,"title":"Volley框架(三)：使用Volley提交表单数据","content":"Volley框架(三)：使用Volley提交表单数据 在上一篇博客《Volley框架(二)：使用Volley加载图片》中，我们已经将Volley加载图片的功能说完了，这篇博客我们来说一下使用Volley提交表单数据。","url":"https://blog.csdn.net/ITRenj/article/details/59795669","images":[]}
{"pid":1,"id":25,"title":"Volley框架(四)：使用Volley上传文件","content":"Volley框架(四)：使用Volley上传文件 在上一篇博客《Volley框架(三)：使用Volley提交表单数据》中，我们已经知道了使用Volley提交表单数据，这篇博客我们来说一下使用Volley实现上传文件。","url":"https://blog.csdn.net/ITRenj/article/details/60640752","images":[]}
{"pid":1,"id":26,"title":"Volley框架(五)：Volley源码分析","content":"Volley框架(五)：Volley源码分析 在前面几篇博客中我们已经把Volley的一些常见用法基本上说得差不多了。说了Volley那么多的用法，但是对于他的原理还不是很了解，所以这篇博客主要来分析一下Volley的执行过程。","url":"https://blog.csdn.net/ITRenj/article/details/60887398","images":[]}
{"pid":1,"id":27,"title":"OkHttp简介及使用","content":"OkHttp是一个处理网络请求的开源项目,是安卓端一个很火热的轻量级网络框架,由Square公司贡献(该公司还贡献了Picasso)，用于替代HttpUrlConnection和Apache HttpClient","url":"https://blog.csdn.net/ITRenj/article/details/69787931","images":[]}
{"pid":1,"id":28,"title":"SVN在Android studio中的使用","content":"SVN在Android studio中的使用 主要内容：怎样在Android Studio中使用SVN版本控制工具","url":"https://blog.csdn.net/ITRenj/article/details/69791517","images":[]}
{"pid":1,"id":29,"title":"Git 使用整理（一）","content":"Git 使用整理（一） 主要包的含内容：git客户端的下载安装、配置用户名和邮箱、本地仓库常用命令、使用配置、工作区和暂存区、撤销、修改和删除文件、生成SSH key、远程仓库","url":"https://blog.csdn.net/ITRenj/article/details/70176739","images":[]}
{"pid":1,"id":30,"title":"Git 使用整理（二）","content":"Git 使用整理（二） 主要包含内容：使用分支、多人协作","url":"https://blog.csdn.net/ITRenj/article/details/70176942","images":[]}
{"pid":1,"id":31,"title":"Git 在 Android Studio 中的使用（图解）","content":"Git 在 Android Studio 中的使用 在《Git 使用整理（一）》和《Git 使用整理（二）》两篇博客中，我们知道了怎样使用Git版本控制工具的命令形式，在这篇博客中就来看一下Git版本控制工具在Android Studio中是怎样使用的吧。","url":"https://blog.csdn.net/ITRenj/article/details/70177537","images":[]}
{"pid":1,"id":32,"title":"面向对象的三个基本特征和五大设计原则","content":"面向对象的三个基本特征和五大设计原则 继承、封装和多态 单一职责原则、开闭原则、替换原则、依赖倒置原则、接口隔离原则","url":"https://blog.csdn.net/ITRenj/article/details/72401398","images":[]}
{"pid":1,"id":33,"title":"应用程序方法数超过限制解决办法","content":"当应用程序的方法数超过65535时的解决办法","url":"https://blog.csdn.net/ITRenj/article/details/72403081","images":[]}
{"pid":1,"id":34,"title":"Android Studio编译常见错误","content":"使用Android studio是build 项目常见问题集结","url":"https://blog.csdn.net/ITRenj/article/details/72403730","images":[]}
{"pid":1,"id":35,"title":"Android 屏幕适配常用方法","content":"Android 屏幕适配常用方法","url":"https://blog.csdn.net/ITRenj/article/details/72403865","images":[]}
{"pid":1,"id":36,"title":"Android 浮动菜单效果控件","content":"Android 浮动菜单效果","url":"https://blog.csdn.net/ITRenj/article/details/73224692","images":[]}
{"pid":1,"id":37,"title":"EditText内容格式化控件 XEditText 和 输入内容过滤器","content":"在我们开发当中，输入框控件是很常见的，最常见的就是注册、登陆、密码设置与修改；另外就是身份证号和银行卡号的录入等。在录入这些信息的时候，如果我们直接使用系统的EditText进行编程，虽然能够实现","url":"https://blog.csdn.net/ITRenj/article/details/78199224","images":[]}
{"pid":1,"id":38,"title":"RxJava2 中常用操作符和Subject常用子类说明","content":"RxJava2 中常用操作符和Subject常用子类代码练习及说明","url":"https://blog.csdn.net/ITRenj/article/details/78753765","images":[]}
{"pid":1,"id":39,"title":"金额输入框 MoneyView","content":"金额输入框主要功能： 1. 指定小数点后能保存的小数位数; 2. 指定从多少位开始到最后不能为小数点; 3. 当第一个输入的为小数点时，自动在小数点前 4. 当第一个输入的为0时，如果接着输入0，仍然显示0；如果接着输入大于0的数，就用后面输入的数将0替换.","url":"https://blog.csdn.net/ITRenj/article/details/78774494","images":[]}
{"pid":1,"id":40,"title":"Android 蓝牙聊天简单Demo","content":"Android 蓝牙聊天简单Demo蓝牙技术是一种近距离通信技术，自从研发至今，已经被广泛应用，生活中处处可见蓝牙耳机，有些穿戴设备也是基于蓝牙进行通信的，蓝牙通信功耗小，对于近距离通信是一个不错的选择","url":"https://blog.csdn.net/ITRenj/article/details/78909474","images":[]}
{"pid":1,"id":41,"title":"AsyncTask 完全解析","content":"AsyncTask 完全解析 引言 我们知道，在 Android 中，UI 线程不能执行耗时操作；在子线程中不能执行更新 UI 的操作。如果需要在子线程中进行 UI 相关的操作，那么就需要借助 Android 中的异步消息机制(比如我们熟悉的Handler消息机制)才能完成","url":"https://blog.csdn.net/ITRenj/article/details/79108413","images":[]}
{"pid":1,"id":42,"title":"Android多个Module统一配置相同jar或库的版本号","content":"Android Studio多个Module依赖相同的库时对版本号进行统一配置 在Android项目中，一个项目经常会依赖其他的一个甚至多个库文件，在这种依赖的时候最常见的一个错误就是 jar包版本不同引起jar包冲突，最常见的做法就是 删掉其中一个，只留下一个","url":"https://blog.csdn.net/ITRenj/article/details/79231736","images":[]}
{"pid":1,"id":43,"title":"Android适配生成对应的values文件","content":"Android适配生成对应的values文件(如：values-1080x1920) 使用如下Java代码自动生成多个values文件夹以及对应的lay-x、lay-y文件","url":"https://blog.csdn.net/ITRenj/article/details/82978564","images":[]}
{"pid":1,"id":44,"title":"Linux 基本指令","content":"Linux 基本指令 推荐：linux命令大全 Linux关机命令 常用：halt、reboot 重启命令 reboot shutdown -r now 立刻重启 shutdown -r 10 过10分钟自动重启","url":"https://blog.csdn.net/ITRenj/article/details/84001533","images":[]}
{"pid":1,"id":45,"title":"Vim基本操作","content":"Vim基本操作 Vim一般认为有三种模式 命令模式：、编辑模式（输入模式以及 末行模式（尾行模式）","url":"https://blog.csdn.net/ITRenj/article/details/84500646","images":[]}
{"pid":1,"id":46,"title":"Android 中的 HandlerThread 类详解","content":"HandlerThread 类继承至 Thread 类，你可以把它看做是一个普通的线程类；当然，既然我们今天要说它，就不能在把它看做是一个普通的线程类了类处理了。","url":"https://blog.csdn.net/ITRenj/article/details/79461878","images":[]}
{"pid":1,"id":47,"title":"Android 中的 IntentService 类详解","content":"IntentService 继承至 Service ，所以 Service 的特点 IntentService 也全部拥有","url":"https://blog.csdn.net/ITRenj/article/details/79470690","images":[]}
{"pid":1,"id":48,"title":"Android DataBinding","content":"添加 Android DataBinding 支持。Android studio 需要在1.3以上，在module级别的gradle中添加大DataBinding支持","url":"https://blog.csdn.net/ITRenj/article/details/83781123","images":[]}
{"pid":1,"id":49,"title":"Dagger 2.11及以上的简便用法","content":"Dagger 2.11及以上的简便用法 关于 Dagger2 的使用网上有很多的例子，这里就不在多说了。但是dagger2在使用的过程中我们几乎需要在每个页面去调用类似代码如下： MainComponent component = DaggerMainComponent.builder() ","url":"https://blog.csdn.net/ITRenj/article/details/85267381","images":[]}
{"pid":1,"id":50,"title":"Android RecyclerView —— 基本使用","content":"RecyclerView 我相信大家都不陌生，是Google在Android 5.0 的时候推出的一个可以在有限的窗口中展示大量数据集的控件(类似的控件有ListView、GridView)，放在了 com.android.support:recyclerview-v7:xx.x.x 包下(xx表示版本)","url":"https://blog.csdn.net/ITRenj/article/details/91556719","images":[]}
{"pid":1,"id":51,"title":"Android RecyclerView —— 适配器封装探索","content":"RecyclerView 如果需要填充数据，就必须使用到适配器。在一般情况下，我们定义一个适配器只需要定义一个类，然后集成 RecyclerView.Adapter 类，然后实现齐总的抽象的方法即可","url":"https://blog.csdn.net/ITRenj/article/details/92405204","images":[]}
{"pid":1,"id":52,"title":"Android RecyclerView —— 自定义分割线","content":"前面说了 RecyclerView 的基本使用以及对适配器的封装，但是在使用 ListView 时，有 dividerHeight 和 divider 属性用来设置分割线的高度和颜色(Drawable)，但是在 RecyclerView 中并没有这个属性，而且也没有替代的属性","url":"https://blog.csdn.net/ITRenj/article/details/92649029","images":[]}
{"pid":1,"id":53,"title":"Android页面状态控制框架(RPageStatusController)","content":"Android页面状态控制框架(RPageStatusController) 在Android开发中，对于需要加载网络数据的页面，一般页面都会对应多种状态，常见的有：加载中状态、网络错误状态、内容为空状态、内容状态、加载失败状态以及没有找到相关内容状态等","url":"https://blog.csdn.net/ITRenj/article/details/93634780","images":[]}
{"pid":1,"id":54,"title":"Java中Collection和Map体系(Java容器)","content":"Java中Collection和Map体系(Java容器) Java常用容器类继承关系图解 Java容器类简介 Java中容器类主要分为四中体系：List、Set、Queue、Map。","url":"https://blog.csdn.net/ITRenj/article/details/94363815","images":[]}